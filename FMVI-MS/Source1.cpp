/* Структура проекта FMVI-MS
FMVI-MS.ino	-	основной файл проекта
	Определение глдобальных констант и переменных по секциям-подсистемам
	class CFMVI-MS {}	-	содержит в себе объекты:
			CEEPROM:			хранение параметров в EEPROM
			CSerialPort:		прием/передача данных по последовательным портам
			CInputImp:			подсчет импульсов расходомера EMFM QTLD-15 / внешнего генератора
			CTemperatureSensor:	получение температуры воды из датчика температуры DS18B20 Maxim/Dallas ICs
			CInputPower:		получение и контроль уровня зарадя АКБ
			CEMFMAlarm:			конрроль аварийных сигналов расходомера
___________________________________________________________________________________________________

CEEPROM.cpp	-	подсистема хранения параметров в EEPROM, 
	class CEEPROM {}
___________________________________________________________________________________________________
CSerialPort.cpp -	прием/передача данных по последовательным портам, 
	class CSerialPort {}
	Определение структур данных обмена между FMVI-MS и FMVI-CP
	ISR_Timer()	-	обработчик прерываний аппаратного таймера: передача пакета данных в FMVI-CP
___________________________________________________________________________________________________
CInputImp.cpp	-	подсчет импульсов расходомера EMFM QTLD-15 / внешнего генератора,
	class CInputImp {}
	ISR_InputImp	-	обработчик прерываний от внешнего источника импульсов: посчет импульсов расходомера
___________________________________________________________________________________________________
CTemperatureSensor.cpp	-	получение температуры воды из датчика температуры DS18B20 Maxim/Dallas ICs
	class CTemperatureSensor {}
___________________________________________________________________________________________________
CInputPower.cpp	-	получение и контроль уровня зарадя АКБ,
	class CInputPower {}
___________________________________________________________________________________________________
CEMFMAlarm.cpp	-	конрроль аварийных сигналов расходомера,
	class CEMFMAlarm {}
___________________________________________________________________________________________________
*/
// Объявления глобальных констант и переменных по секциям-подсистемам:

// Global Flags
INT isInitMS = 0;			// Is there a initialisation of FMVI-MS
INT isContactCP = 0;		// Is there a contact FMVI-MS with FMVI-CP
INT isTemperatureScan = 0;	
INT is Command = 0;


///////////////////////////////////////////////////////////////
// Initialisation FMVI-MS
///////////////////////////////////////////////////////////////
void setup()
{
// Создание объекта FMVI-MS
// Инициализация объекта
	



}


///////////////////////////////////////////////////////////////
// Working loop of FMVI-MS
///////////////////////////////////////////////////////////////

void loop()
{
	if (!isInit) {
		// Чтение данных из EEPROM
		// Инициализация объектов

		// Первоначальное измерение температуры
		if (!isTemperatureScan) {
		
			isTemperatureScan = 1;
		}
		
		isInit = 1;

	}

	if (!isContactCP) {
		// Ожидание контакта
		isContactCP = 1;
	}	

	if (!pSSerial->Read(pbBuffer)) {
		// В последовательном порту есть данные от FMVI-CP
		// Разбор команды и ее выполнение
		switch (код_команды) {



		}
		// Запись данных в пакет для передачи в FMVI-CP 
	}

	// Измерение температуры
	if (!isTemperatureScan) {

		isTemperatureScan = 1;
	}
	// Чтение ALARM EMFM
	// Чтение состяния датчика температуры
	// Чтение уровня выходного напржения АКБ
	
}



// Обработчик прерываний аппаратного таймера
// Глобальные параметры: FLOAT fTimerFreq - частота прерываний таймера
void ISR_Timer() {
	// Передать в последовательный порт исходящий пакет данных
	pSSerial->Write(pbOutBuff);

	// Наращиваем счетчик тиков таймера
	dwTimerTick++;

}

// Обработчик аппаратных прерываний от внешнего источника импульсов
// Глобальные параметры: nImp_Ltr - кол-во импульсов на литр, nImpThresold - минимальна длительность импульса
void ISR_InputImp() {
	
	if (0есть_импульс_нужной_длительности) {
		dwAllImpCount++;							// Общий счетчик импульсов
		
		if (dwCurrImpCount > 0) dwCurrImpCount--;	// Счетчик импульсов для заданного пролива

		dwImpTime = millis();						// Запоминаем отсчет времени импульса
	}
	else // дребезг


}


// СТруктуры пакетов данных: исходящего, входящего
class COutDataMS {

	BYTE		// Длина пакета информации
	BYTE		// Биты состояни элементов измерительной системы
	FLOAT		// Температура воды
	UINT		// Уровень зарда АКБ
	FLOAT		// Мгновенный поток имп/сек
	DWORD		// Общий счетчик импульсов
	DWORD		// Счетчик импульсов для заданного пролива


			
};

class CInpDataMS {

	BYTE		// Длина пакета информации
	BYTE		// Код комманды
	BYTE		// Операнд 1
	BYTE		// Операнд 2
	BYTE		// Операнд 3
	BYTE		// Операнд 4
};